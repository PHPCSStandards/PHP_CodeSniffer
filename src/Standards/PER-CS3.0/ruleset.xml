<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PSR12" xsi:noNamespaceSchemaLocation="../../../phpcs.xsd">
    <description>The PSR-12 coding standard.</description>
    <arg name="tab-width" value="4"/>

    <!-- 2. General -->

    <!-- 2.1 Basic Coding Standard -->

    <!-- Code MUST follow all rules outlined in PSR-1. -->
    <rule ref="PSR1"/>

    <!-- The term "StudlyCaps" in PSR-1 MUST be interpreted as PascalCase where the first letter of each word is capitalized including the very first letter. -->

    <!-- 2.2 Files -->

    <!-- All PHP files MUST use the Unix LF (linefeed) line ending only. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- All PHP files MUST end with a non-blank line, terminated with a single LF. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="PSR2.Files.ClosingTag"/>

    <!-- 2.3 Lines -->

    <!-- There MUST NOT be a hard limit on line length.
    The soft limit on line length MUST be 120 characters.
    Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD be split into multiple subsequent lines of no more than 80 characters each. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- There MUST NOT be trailing whitespace at the end of lines.
    Blank lines MAY be added to improve readability and to indicate related blocks of code except where explicitly forbidden. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- 2.4 Indenting -->

    <!-- Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- 2.5 Keywords and Types -->

    <!-- All PHP reserved keywords and types [1][2] MUST be in lower case.
    Any new types and keywords added to future PHP versions MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Short form of type keywords MUST be used i.e. bool instead of boolean, int instead of integer etc. -->
    <!-- checked by PSR12.Keywords.ShortFormTypeKeywords -->

    <!-- Compound types includes intersection, union, and mixed intersection and union type declarations. PHP requires that all compound types be structured as an ORed (unioned) series of ANDs (intersections), and that each set of intersections be encased with parentheses. -->
    <!-- The union symbol | and intersection symbol & MUST NOT have a leading or trailing space. The parentheses MUST NOT have a leading or trailing space. -->
    <!-- If it is necessary to split a compound type into multiple lines:
    If the type contains only intersections or only unions, then each line MUST have a single type.
    If the type contains both intersections and unions, then each line MUST have a single union segment. All intersections in a segment MUST be on the same line.
    The symbol on which the compound type is split MUST be at the start of each line. -->
    <!-- If one of the ORed conditions is null, it MUST be the last item in the list.  -->
    <!-- An intersection of a single simple type with null SHOULD be abbreviated using the ? alternate syntax: ?T. -->
    <!--todo-->

    <!-- 2.6 Trailing commas -->

    <!-- Numerous PHP constructs allow a sequence of values to be separated by a comma, and the final item may have an optional comma. Examples include array key/value pairs, function arguments, closure use statements, match() statement branches, etc. -->
    <!-- If that list is contained on a single line, then the last item MUST NOT have a trailing comma. -->
    <!-- If the list is split across multiple lines, then the last item MUST have a trailing comma. -->
    <!--todo-->

    <!-- 2.7 Naming -->

    <!-- This PSR RECOMMENDS following the php-src coding standards with regard to abbreviations and acronyms. -->
    <!-- Specifically: -->
    <!-- Abbreviations and acronyms as well as initialisms SHOULD be avoided wherever possible, unless they are much more widely used than the long form (e.g. HTTP or URL). Abbreviations, acronyms, and initialisms SHOULD be treated like regular words, thus they SHOULD be written with an uppercase first character, followed by lowercase characters. -->
    <!--todo-->
    <!--  -->

    <!-- 3. Declare Statements, Namespace, and Import Statements -->

    <!-- The header of a PHP file may consist of a number of different blocks. If present, each of the blocks below MUST be separated by a single blank line, and MUST NOT contain a blank line. Each block MUST be in the order listed below, although blocks that are not relevant may be omitted.

    Opening php tag.
    File-level docblock.
    One or more declare statements.
    The namespace declaration of the file.
    One or more class-based use import statements.
    One or more function-based use import statements.
    One or more constant-based use import statements.
    The remainder of the code in the file. -->
    <!-- checked by PSR12.Files.FileHeader -->

    <!-- When a file contains a mix of HTML and PHP, any of the above sections may still be used. If so, they MUST be present at the top of the file, even if the remainder of the code consists of a closing PHP tag and then a mixture of HTML and PHP. -->

    <!-- When the opening php tag is on the first line of the file, it MUST be on its own line with no other statements unless it is a file containing markup outside of PHP opening and closing tags. The php tag MUST always be lower case. -->
    <!-- checked by PSR12.Files.OpenTag -->
    <!--todo-->

    <!-- Import statements MUST never begin with a leading backslash as they must always be fully qualified. -->
    <!-- checked by PSR12.Files.ImportStatement -->

    <!-- When using compound namespaces, there MUST NOT be more than two sub-namespaces within the group. -->
    <!-- checked by PSR12.Namespaces.CompoundNamespaceDepth -->
    <!--todo-->

    <!-- When wishing to declare strict types in files containing markup outside PHP opening and closing tags, the declaration MUST be on the first line of the file and include an opening PHP tag, the strict types declaration and closing tag. -->
    <!-- Declare statements MUST NOT contain any spaces and MUST be exactly declare(strict_types=1) (with an optional semicolon terminator). -->
    <!-- Block declare statements are allowed and MUST be formatted as below. -->
    <!-- checked by PSR12.Files.DeclareStatement -->

    <!-- 4. Classes, Properties, and Methods -->

    <!-- Any closing brace MUST NOT be followed by any comment or statement on the same line. -->
    <!-- checked by PSR12.Classes.ClosingBrace -->

    <!-- When instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor. -->
    <!-- checked by PSR12.Classes.ClassInstantiation -->

    <!-- If class contains no additional declarations (such as an exception that exists only to extend another exception with a new type), then the body of the class SHOULD be abbreviated as {} and placed on the same line as the previous symbol, separated by a space. -->
    <!-- When accessing a class member immediately after instantiating a new class, the instantiation SHOULD NOT be wrapped in parentheses. -->
    <!--todo-->

    <!-- 4.1 Extends and Implements -->

    <!-- The extends and implements keywords MUST be declared on the same line as the class name. -->
    <!-- The opening brace for the class MUST go on its own line, and MUST NOT be preceded or followed by a blank line. -->
    <!-- The closing brace for the class MUST go on its own line, immediately following the last line of the class body, and MUST NOT be preceded by a blank line. -->
    <!-- Lists of implements and, in the case of interfaces, extends MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line. -->
    <!-- checked by PSR12.Classes.OpeningBraceSpace -->
    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <!--todo-->

    <!-- 4.2 Using traits -->

    <!-- The use keyword used inside the classes to implement traits MUST be declared on the next line after the opening brace. -->
    <!-- Each individual trait that is imported into a class MUST be included one-per-line and each inclusion MUST have its own use import statement. -->
    <!-- When the class has nothing after the use import statement, the class closing brace MUST be on the next line after the use import statement. Otherwise, it MUST have a blank line after the use import statement. -->
    <!-- When using the insteadof and as operators they MUST be used as follows taking note of indentation, spacing, and new lines. -->
    <!-- checked by PSR12.Traits.UseDeclaration -->

    <!-- 4.3 Properties and Constants -->

    <!-- Visibility MUST be declared on all properties. If set-visibility is specified, then the general visibility MAY be omitted. -->
    <!--todo-->
    <!-- Visibility MUST be declared on all constants. -->
    <!-- checked by PSR12.Properties.ConstantVisibility -->

    <!-- The var keyword MUST NOT be used to declare a property. -->
    <!-- There MUST NOT be more than one property or constant declared per statement. -->
    <!--todo-->
    <!-- Property or constant names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning. -->
    <!-- There MUST be a space between type declaration and property name. -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- 4.4 Methods and Functions -->

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Method names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
        <message>Method name "%s" must not be prefixed with an underscore to indicate visibility</message>
    </rule>

    <!-- Method and function names MUST NOT be declared with space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- If a function or method contains no statements or comments (such as an empty no-op implementation or when using constructor property promotion), then the body SHOULD be abbreviated as {} and placed on the same line as the previous symbol, separated by a space. -->
    <!--todo-->

    <!-- 4.5 Method and Function Parameters -->

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- Method and function parameters with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.
    When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <!-- When you have a return type declaration present, there MUST be one space after the colon followed by the type declaration. The colon and declaration MUST be on the same line as the argument list closing parenthesis with no spaces between the two characters. -->
    <!-- checked by PSR12.Functions.ReturnTypeDeclaration -->

    <!-- In nullable type declarations, there MUST NOT be a space between the question mark and the type. -->
    <!-- checked by PSR12.Functions.NullableTypeDeclaration -->

    <!-- When using the reference operator & before an argument, there MUST NOT be a space after it. -->
    <!-- There MUST NOT be a space between the variadic three dot operator and the argument name. -->
    <!-- When combining both the reference operator and the variadic three dot operator, there MUST NOT be any space between the two of them. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <!-- 4.6 Modifier Keywords -->

    <!-- Classes, properties, and methods have numerous keyword modifiers that alter how the engine and language handles them. When present, they MUST be in the following order:
    Inheritance modifier: abstract or final
    Visibility modifier: public, protected, or private
    Set-visibility modifier: public(set), protected(set), or private(set)
    Scope modifier: static
    Mutation modifier: readonly
    Type declaration
    Name
    All keywords MUST be on a single line, and MUST be separated by a single space. All keywords MUST be all lower-case. The public keyword MAY be omitted when using a set-visibility on a public-read property. -->
    <!-- checked by PSR2.Methods.MethodDeclaration included above -->
    <!--todo-->

    <!-- 4.7 Method and Function Calls -->

    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. A single argument being split across multiple lines (as might be the case with a closure or array) does not constitute splitting the argument list itself. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PSR2.Methods.FunctionCallSignature"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
        <severity>0</severity>
    </rule>

    <!-- If using named arguments, there MUST NOT be a space between the argument name and colon, and there MUST be a single space between the colon and the argument value. -->
    <!-- Method chaining MAY be put on separate lines, where each subsequent line is indented once. When doing so, the first method MUST be on the next line. -->
    <!-- The exit() and die() functions SHOULD always be called with parentheses even if no argument is given to clearly distinguish them from an access to a constant named exit or die. -->
    <!--todo-->

    <!-- 4.8 Function Callable References -->

    <!-- A function or method may be referenced in a way that creates a closure out of it, by providing ... in place of arguments. -->
    <!-- If so, the ... MUST NOT include any whitespace before or after. That is, the correct format is foo(...). -->
    <!--todo-->

    <!-- 4.9 Property Hooks -->

    <!-- Object properties may also include hooks, which have a number of syntactic options. -->
    <!-- When using the long form of hooks:
    The opening brace MUST be on the same line as the property.
    The opening brace MUST be separated from the property name or its default value by a single space.
    The closing brace MUST be on its own line, and have no comment following it.
    The entire body of the hook definition MUST be indented one level.
    The body of each hook MUST be indented one level.
    If multiple hooks are declared, they MUST be separated by at least a single line break. They MAY be separated by an additional blank line to aid readability. -->
    <!-- Property hooks also support multiple short-hook variations. -->
    <!-- For a set hook, if the argument name and type do not need to be redefined, then they MAY be omitted. -->
    <!-- If a hook consists of a single expression, then PHP allows it to be shortened using =>. In that case:
    There MUST be a single space on either side of the => symbol.
    The body MUST begin on the same line as the hook name and =>.
    Wrapping is allowed if the expression used allows for wrapping, using the rules defined elsewhere in this document. -->
    <!-- Additionally, if the following criteria are met:
    There is only one hook implementation.
    That hook uses the short-hook syntax.
    That hook expression does not contain any wrapping.
    Then the hook MAY be listed entirely inline. In that case,
    The hook name MUST be separated from the opening brace and the arrow operator by a single space
    The semicolon ending of the hook MUST be separated from the closing brace by a single space. -->
    <!-- Property hooks MAY also be defined in constructor-promoted properties. However, they MUST be only a single hook, with a short-syntax body, defined on a single line as above. If those criteria are not met, then the promoted property MUST NOT have any hooks defined inline. -->
    <!--todo-->

    <!-- 4.10 Interface and abstract properties -->

    <!-- Abstract properties may be defined in interfaces or abstract classes, but are required to specify if they must support get operations, set operations, or both. In the case of abstract classes, they MAY include a body for one or another hook. -->
    <!-- If there is a body for any hook, then the entire hook block MUST follow the same rules as for defined hooks above. The only difference is that a hook that has no body specified have a single semicolon after the hook keyword, with no space before it. -->
    <!-- If there is no body for either hook, then the following rules apply:
    The operation block MUST be on the same line as the property.
    There MUST be a single space between the property name and the operation block {}.
    There MUST be a single space after the opening {.
    There MUST be a single space before the closing };
    There MUST NOT be a space between the operation and its required semicolon.
    If multiple operations are specified, they MUST be separated by a single space.
    The get operation MUST be listed before the set operation. -->
    <!--todo-->

    <!-- 5. Control Structures -->

    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The body MUST be on the next line after the opening brace
    The closing brace MUST be on the next line after the body
    The body of each structure MUST be enclosed by braces. This standardizes how the structures look and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- exclude this message as it is already checked in Generic.PHP.LowerCaseKeyword -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.AsNotLower">
        <severity>0</severity>
    </rule>

    <!-- 5.1 if, elseif, else -->

    <!-- else and elseif are on the same line as the closing brace from the earlier body. -->
    <!-- checked by Squiz.ControlStructures.ControlSignature included above -->

    <!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.2 switch, case -->

    <!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keywords) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.3.1 while -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.3.2 do while -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.4 for -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first expression MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.5 foreach -->

    <!-- exclude these messages as they are already checked by PSR2.ControlStructures.ControlStructureSpacing -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceBeforeClose">
        <severity>0</severity>
    </rule>

    <!-- 5.6 try, catch, finally -->

    <!-- 6. Operators -->

    <!-- When space is permitted around an operator, multiple spaces MAY be used for readability purposes. -->
    <!-- All operators not described here are left undefined. -->

    <!-- 6.1. Unary operators -->

    <!-- The increment/decrement operators MUST NOT have any space between the operator and operand. -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- Type casting operators MUST NOT have any space within the parentheses. -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- 6.2. Binary operators -->

    <!-- All binary arithmetic, comparison, assignment, bitwise, logical, string, and type operators MUST be preceded and followed by at least one space. -->
    <!-- checked by PSR12.Operators.OperatorSpacing -->

    <!-- 6.3. Ternary operators -->

    <!-- The conditional operator, also known simply as the ternary operator, MUST be preceded and followed by at least one space around both the ? and : characters. -->
    <!-- When the middle operand of the conditional operator is omitted, the operator MUST follow the same style rules as other binary comparison operators. -->
    <!-- checked by PSR12.Operators.OperatorSpacing -->

    <!-- 7. Closures -->

    <!-- Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword. -->
    <!-- The opening brace MUST go on the same line, and the closing brace MUST go on the next line following the body. -->
    <!-- There MUST NOT be a space after the opening parenthesis of the argument list or variable list, and there MUST NOT be a space before the closing parenthesis of the argument list or variable list. -->
    <!-- In the argument list and variable list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- Closure arguments with default values MUST go at the end of the argument list. -->
    <!-- Argument lists and variable lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument or variable per line. -->
    <!-- When the ending list (whether of arguments or variables) is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <!-- checked by Squiz.Functions.MultiLineFunctionDeclaration -->

    <!-- If a return type is present, it MUST follow the same rules as with normal functions and methods; if the use keyword is present, the colon MUST follow the use list closing parentheses with no spaces between the two characters. -->
    <!-- checked by PSR12.Functions.ReturnTypeDeclaration -->

    <!-- 8. Anonymous Classes -->

    <!-- Anonymous Classes MUST follow the same guidelines and principles as closures in the above section. -->
    <!-- The opening brace MAY be on the same line as the class keyword so long as the list of implements interfaces does not wrap. If the list of interfaces wraps, the brace MUST be placed on the line immediately following the last interface. -->
    <!-- checked by PSR12.Classes.AnonClassDeclaration -->

</ruleset>
