<?php

// ok
somefunction1($foo, $bar, [
    // ...
], $baz);

// ok
$app->get('/hello/{name}', function ($name) use ($app) {
    return 'Hello '.$app->escape($name);
}, array(
    '1',
    '2',
    '3',
));

// error
somefunction2(
    $foo,
    $bar,
    [
    // ...
    ],
    $baz
);

// ok
somefunction3(// ...
    $foo,
    $bar,
    [
        // ...
    ],
    $baz
);

// ok
somefunction4('
    this should not
    give an error
    because it\'s actually
    one line call
    with multi-line string
');

// ok
somefunction5("hey,
multi-line string with some
extra args", $foo, 12);

// error
somefunction6(
    '
    but args in a new line
    are not okâ€¦
    ',
    $foo
);

$this->setFoo(true
    ? 1
    : 2, false, array(
    'value',
    'more'));

$this->setFoo('some'
    . 'long'
    . 'text', 'string');

foo(bar(), $a);
foo();bar();

foo(
    true
);

myFunction(<<<END
Foo
END
);

var_dump(array(<<<'EOD'
foobar!
EOD
));

myFunction(<<<END
Foo
END
, 'bar');

myFunction(
    <<<END
Foo
END
    ,
    'bar'
);

if (array_filter(
    $commands,
    function ($cmd) use ($commandName) {
        return ($cmd['name'] == $commandName);
    }
)) {
    // Do something
}

myFunction(
    'foo',
    (object) array(
        'bar' => function ($x) {
            return true;
        },
        'baz' => false
    )
);
$qux = array_filter(
    $quux,
    function ($x) {
        return $x;
    }
);

$this->listeners[] = $events->getSharedManager()->attach(
    'Zend\Mvc\Application',
    MvcEvent::EVENT_DISPATCH,
    [$this, 'selectLayout'],
    100
);

// phpcs:set PSR2.Methods.FunctionCallSignature requiredSpacesBeforeClose 1
foo('Testing
    multiline text' );

foo('Testing
    multiline text: ' ); // . $text


foo('Testing
    multiline text: ' /* . $text */ );

foo('Testing
    multiline text: ' /* . $text */ );
    // . $other_text


foo('Testing
    multiline text: ' /*
 . $text
// . $text2
 */ );
// phpcs:set PSR2.Methods.FunctionCallSignature requiredSpacesBeforeClose 0

foo('Testing
    multiline text');

foo('Testing
    multiline text');

foo('Testing
    multiline text'); // hello


foo('Testing
    multiline text' /* hello */);

foo('Testing
    multiline text');
    // hello


foo('Testing
    multiline text'
    /* hello */);

$var = foo('Testing
    multiline')
    // hi
 + foo('Testing
    multiline');
    // hi


class Test
{
    public function getInstance()
    {
        return new static(
            'arg',
            'foo'
        );
    }

    public function getSelf()
    {
        return new self(
            'a',
            'b',
            'c'
        );
    }
}

$x = $var(
    'y',
    'x'
);

$obj->{$x}(
    1,
    2
);

(function ($a, $b) {
    return function ($c, $d) use ($a, $b) {
        echo $a, $b, $c, $d;
    };
})(
    'a',
    'b'
)(
    'c',
    'd'
);

return trim(preg_replace_callback(
            // sprintf replaces IGNORED_CHARS multiple times: for %s as well as %1$s (argument numbering)
            // /[%s]*([^%1$s]+)/ results in /[IGNORED_CHARS]*([^IGNORED_CHARS]+)/
    sprintf('/[%s]*([^%1$s]+)/', self::IGNORED_CHARS),
    function (array $term) use ($mode): string {
        // query pieces have to bigger than one char, otherwise they are too expensive for the search
        if (mb_strlen($term[1], 'UTF-8') > 1) {
            // in boolean search mode '' (empty) means OR, '-' means NOT
            return sprintf('%s%s ', $mode === 'AND' ? '+' : '', self::extractUmlauts($term[1]));
        }

        return '';
    },
    $search
));

return trim(preg_replace_callback(
// sprintf replaces IGNORED_CHARS multiple times: for %s as well as %1$s (argument numbering)
// /[%s]*([^%1$s]+)/ results in /[IGNORED_CHARS]*([^IGNORED_CHARS]+)/
    sprintf('/[%s]*([^%1$s]+)/', self::IGNORED_CHARS),
    function (array $term) use ($mode): string {
        // query pieces have to bigger than one char, otherwise they are too expensive for the search
        if (mb_strlen($term[1], 'UTF-8') > 1) {
            // in boolean search mode '' (empty) means OR, '-' means NOT
            return sprintf('%s%s ', $mode === 'AND' ? '+' : '', self::extractUmlauts($term[1]));
        }

        return '';
    },
    $search
));

// PHP 8.0 named parameters.
array_fill_keys(
    keys: range(
        1,
        12,
    ),
    value: true,
);

array_fill_keys(
    keys: range(
        1,
        12,
    ),
    value: true,
);

// phpcs:set PSR2.Methods.FunctionCallSignature allowMultipleArguments true
array_fill_keys(
    keys: range(
        1,
        12,
    ), value: true,
);
// phpcs:set PSR2.Methods.FunctionCallSignature allowMultipleArguments false

// https://github.com/squizlabs/PHP_CodeSniffer/issues/2078#issuecomment-401641650
// This sniff should accept both of these styles. Generic.WhiteSpace.ScopeIndent can complain & fix this if enabled.
$repository->foo()
           ->bar(
                function () {
                    return true;
                }
           );
$repository->foo()
           ->bar(
               function () {
                   return true;
               }
           );

// Initial call spaces only, params mixed.
    $result = doThing(
        $one,
        $two ,
        $three,
        $four,
        $five,
        $six,
        $seven,
        $eight
    );

// Initial call tab only, param spaces.
	$result = doThing(
     $one,
    $two
);

// Initial call tab only, param tab.
	$result = doThing(
     $one,
    $two
);

// Initial call tab and space, param tab and space.
	  $result = doThing(
       $one,
    $two
);

// Initial call space only, param tab and space.
    $result = doThing(
        $one,
        $two
    );

// Initial call space only, param tab only.
    $result = doThing(
        $one,
        $two
    );

// Real example of mixed tab/space indention from WordPress codebase.
    $v_binary_data = pack(
        "VvvvvvVVVvv",
        0x04034b50,
        $p_header['version_extracted'],
        $p_header['flag'],
        $p_header['compression'],
        $v_mtime,
        $v_mdate,
        $p_header['crc'],
        $p_header['compressed_size'],
        $p_header['size'],
        strlen($p_header['stored_filename']),
        $p_header['extra_len']
    );

// Real example of mixed tab/space indention from WordPress codebase.
              PclZip::privErrorLog(
                  PCLZIP_ERR_UNSUPPORTED_COMPRESSION,
                "Filename '".$v_header['stored_filename']."' is "
				  	    	  	   ."compressed by an unsupported compression "
                ."method (".$v_header['compression'].") "
            );

// Real example of mixed tab/space indention from WordPress codebase.
        if ($v_size > 2) {
          PclZip::privErrorLog(
              PCLZIP_ERR_INVALID_PARAMETER,
            "Invalid number / type of arguments"
        );
          return 0;
        }

// Real example of mixed tab/space indention from WordPress codebase.
// Not aligned on a 4-space indent
                return chr(0x07 & (ord($utf8[0]) >> 2))
                     . chr((0xC0 & (ord($utf8[0]) << 6))
                         | (0x3F & ord($utf8[1])));
